package com.hiddenCities.map;

import java.util.ArrayList;
import java.util.List;

import com.hiddenCities.R;
import com.hiddenCities.main.HiddenCitiesMain;
import com.hiddenCities.main.XmlValuesModel;

import android.annotation.SuppressLint;
import android.app.Fragment;
import android.content.Context;
import android.os.Bundle;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.MotionEvent;
import android.view.ViewGroup;
import android.view.WindowManager;

import com.google.android.gms.common.ConnectionResult;
import com.google.android.gms.common.api.GoogleApiClient;
import com.google.android.gms.common.api.GoogleApiClient.ConnectionCallbacks;
import com.google.android.gms.common.api.GoogleApiClient.OnConnectionFailedListener;
import com.google.android.gms.location.LocationListener;
import com.google.android.gms.location.LocationRequest;
import com.google.android.gms.location.LocationServices;
import com.google.android.gms.maps.CameraUpdateFactory;
import com.google.android.gms.maps.GoogleMap;
import com.google.android.gms.maps.MapsInitializer;
import com.google.android.gms.maps.GoogleMap.OnMyLocationButtonClickListener;
import com.google.android.gms.maps.model.BitmapDescriptor;
import com.google.android.gms.maps.model.BitmapDescriptorFactory;
import com.google.android.gms.maps.model.LatLng;
import com.google.android.gms.maps.model.Marker;
import com.google.android.gms.maps.model.MarkerOptions;
import com.google.android.gms.maps.model.PolylineOptions;
import com.google.android.gms.maps.MapView;

import android.graphics.Color;
import android.location.Location;
import android.media.AudioManager;
import android.media.ToneGenerator;

import android.view.View;
import android.view.inputmethod.InputMethodManager;
import android.widget.Button;
import android.widget.Toast;

@SuppressLint("ClickableViewAccessibility")
public class HiddenCitiesMap extends Fragment

implements ConnectionCallbacks, OnConnectionFailedListener, LocationListener, OnMyLocationButtonClickListener,
		View.OnTouchListener
{

	private GoogleMap						mMap;

	private GoogleApiClient					mGoogleApiClient;

	private static final int[]				BUTTON_IDS				= { R.id.CameraButton, R.id.HelpButton

																	};
	private List<Button>					buttonList;

	Button									mButton;

	static final ToneGenerator				_toneGenerator			= new ToneGenerator(AudioManager.STREAM_MUSIC, 100);

	static int[]							TONE_IDS				= { ToneGenerator.TONE_DTMF_1,
			ToneGenerator.TONE_DTMF_2,

																	};
	private static final LocationRequest	REQUEST					= LocationRequest.create()
																			.setInterval(5000)
																			// 5 seconds
																			.setFastestInterval(16)
																			// 16ms = 60fps
																			.setPriority(
																					LocationRequest.PRIORITY_HIGH_ACCURACY);

	LatLng[]								mWaypointLatLongList	= null;
	LatLng[]								mMarkerLatLongList		= null;
	Marker[]								mMarkerList				= null;

	View									mView;
	HiddenCitiesMain						mActivity;
	MapView									mMapView;

	//private TextView mMessageView;

	// These settings are the same as the settings for the map. They will in fact give you updates
	// at the maximal rates currently possible.

	public HiddenCitiesMap(List<XmlValuesModel> aMarkerData, List<XmlValuesModel> aWaypointData)
	{
		fillWithData(aMarkerData, aWaypointData);
	}

	@Override
	public void onCreate(Bundle savedInstanceState)
	{
		super.onCreate(savedInstanceState);
		mActivity = (HiddenCitiesMain) getActivity();
		// mMessageView = (TextView) findViewById(R.id.message_text);
	}

	public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState)
	{
		System.out.println("trying to onCreateView");
		
		mActivity = (HiddenCitiesMain) getActivity();
		mView = inflater.inflate(R.layout.map_layout, container, false);
		mActivity.getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,
				WindowManager.LayoutParams.FLAG_FULLSCREEN);

		if (mActivity.getActionBar().isShowing())
			mActivity.getActionBar().hide();

		View decorView = getActivity().getWindow().getDecorView();
	      decorView.setSystemUiVisibility(View.SYSTEM_UI_FLAG_LAYOUT_STABLE
	                                    | View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION
	                                    | View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN
	                                    | View.SYSTEM_UI_FLAG_HIDE_NAVIGATION
	                                    | View.SYSTEM_UI_FLAG_FULLSCREEN
	                                    | View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY);
		
		buttonList = new ArrayList<Button>();
		for (int id : BUTTON_IDS) {
			Button mButton = (Button) mView.findViewById(id);
			mButton.setOnTouchListener(this); // maybe
			buttonList.add(mButton);
		}
		mMapView = (MapView) mView.findViewById(R.id.mapView);
		mMapView.onCreate(savedInstanceState);
		mMapView.onResume(); //without this, map showed but was empty 

		// Gets to GoogleMap from the MapView and does initialization stuff

		System.out.println("done trying to onCreateView");
		return mView;
	}

	@Override
	public void onResume()
	{
		super.onResume();

//		mActivity.getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,
//				WindowManager.LayoutParams.FLAG_FULLSCREEN);
		mActivity.getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,
				WindowManager.LayoutParams.FLAG_FULLSCREEN);

		if (mActivity.getActionBar().isShowing())
			mActivity.getActionBar().hide();

		View decorView = getActivity().getWindow().getDecorView();
	      decorView.setSystemUiVisibility(View.SYSTEM_UI_FLAG_LAYOUT_STABLE
	                                    | View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION
	                                    | View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN
	                                    | View.SYSTEM_UI_FLAG_HIDE_NAVIGATION
	                                    | View.SYSTEM_UI_FLAG_FULLSCREEN
	                                    | View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY);

		setUpMapIfNeeded();
		setUpGoogleApiClientIfNeeded();
		mGoogleApiClient.connect();
	}

	@Override
	public void onPause()
	{
		super.onPause();
		if (mGoogleApiClient != null) {
			mGoogleApiClient.disconnect();
		}
	}

	public void addNewMarker(LatLng point, String title)
	{
		MarkerOptions markerOptions = new MarkerOptions();
		markerOptions.position(point);
		markerOptions.title(title);
		BitmapDescriptor bitmapDescriptor = BitmapDescriptorFactory.defaultMarker(BitmapDescriptorFactory.HUE_AZURE);
		markerOptions.icon(bitmapDescriptor);	
		mMap.addMarker(markerOptions);
	}
	
	public void addNewMarker(LatLng point, String title, boolean visited)
	{
		MarkerOptions markerOptions = new MarkerOptions();
		markerOptions.position(point);
		markerOptions.title(title);
		if(visited==true){
			BitmapDescriptor bitmapDescriptor = BitmapDescriptorFactory.defaultMarker(BitmapDescriptorFactory.HUE_AZURE);
			markerOptions.icon(bitmapDescriptor);		
		}
		else{
			
		}
		mMap.addMarker(markerOptions);
	}

	public void fillWithData(List<XmlValuesModel> aMarkerData, List<XmlValuesModel> aWaypointData)
	{
		if (aMarkerData != null) {
			mMarkerList = new Marker[aMarkerData.size()];
			mMarkerLatLongList = new LatLng[aMarkerData.size()];
			for (int i = 0; i < aMarkerData.size(); i++) {
				XmlValuesModel xmlRowData = aMarkerData.get(i);
				if (xmlRowData != null) {
					mMarkerLatLongList[i] = new LatLng(xmlRowData.getMarkerLat(), xmlRowData.getMarkerLong());
				} else
					Log.e("Markers", "Markers value null");
			}
		}
		if (aWaypointData != null) {

			mWaypointLatLongList = new LatLng[aWaypointData.size()];

			for (int k = 0; k < aWaypointData.size(); k++) {
				XmlValuesModel xmlRowData = aWaypointData.get(k);
				if (xmlRowData != null) {
					mWaypointLatLongList[k] = new LatLng(xmlRowData.getWaypointLat(), xmlRowData.getWaypointLong());
				} else
					Log.e("Waypoints", "Waypoint value null");
			}
		}
	}

	private void setUpMapIfNeeded()
	{
		// Do a null check to confirm that we have not already instantiated the map.
		if (mMap == null) {
			mMap = mMapView.getMap();

			// Needs to call MapsInitializer before doing any CameraUpdateFactory calls
			MapsInitializer.initialize(mActivity);

			// Check if we were successful in obtaining the map.
			if (mMap != null) {
				mMap.setMyLocationEnabled(true);
				mMap.setOnMyLocationButtonClickListener(this);
				if (mMarkerLatLongList != null) {
					for (int l = 0; l < mMarkerLatLongList.length; l++) {
						addNewMarker(mMarkerLatLongList[l], Integer.toString(l));
					}
				}

				if (mWaypointLatLongList != null) {
					PolylineOptions options = new PolylineOptions();
					for (int j = 0; j < mWaypointLatLongList.length; j++) {
						options.add(mWaypointLatLongList[j]).color(Color.BLUE).width(15);
					}
					mMap.addPolyline(options);
					mMap.moveCamera(CameraUpdateFactory.newLatLngZoom(mWaypointLatLongList[0], 17));
				}
			}
		}
	}

	private void setUpGoogleApiClientIfNeeded()
	{
		if (mGoogleApiClient == null) {
			mGoogleApiClient = new GoogleApiClient.Builder(mActivity).addApi(LocationServices.API)
					.addConnectionCallbacks(this).addOnConnectionFailedListener(this).build();
		}
	}

	/**
	 * Button to get current Location. This demonstrates how to get the current
	 * Location as required without needing to register a LocationListener.
	 */
	public void showMyLocation(View view)
	{
		if (mGoogleApiClient != null && mGoogleApiClient.isConnected()) {
			String msg = "Location = " + LocationServices.FusedLocationApi.getLastLocation(mGoogleApiClient);
			Toast.makeText(mActivity.getApplicationContext(), msg, Toast.LENGTH_SHORT).show();
		}
	}

	/**
	 * Implementation of {@link LocationListener}.
	 */
	@Override
	public void onLocationChanged(Location location)
	{
		if (mMarkerLatLongList != null) {
			for (int l = 0; l < mMarkerLatLongList.length; l++) {
				double distance = 0;
				Location locationMarker = new Location("A");
				locationMarker.setLatitude(mMarkerLatLongList[l].latitude);
				locationMarker.setLongitude(mMarkerLatLongList[l].longitude);
				distance = locationMarker.distanceTo(location);
				if (distance < 10) {
					mActivity.doVibrate();
					Toast.makeText(mActivity.getApplicationContext(), "We are close to waypoint" + Integer.toString(l),
							Toast.LENGTH_SHORT).show();
				}
			}
		}
	}

	/**
	 * Callback called when connected to GCore. Implementation of
	 * {@link ConnectionCallbacks}.
	 */
	@Override
	public void onConnected(Bundle connectionHint)
	{
		LocationServices.FusedLocationApi.requestLocationUpdates(mGoogleApiClient, REQUEST, this); // LocationListener
	}

	/**
	 * Callback called when disconnected from GCore. Implementation of
	 * {@link ConnectionCallbacks}.
	 */
	@Override
	public void onConnectionSuspended(int cause)
	{
		// Do nothing
	}

	/**
	 * Implementation of {@link OnConnectionFailedListener}.
	 */
	@Override
	public void onConnectionFailed(ConnectionResult result)
	{
		// Do nothing
	}

	@Override
	public boolean onMyLocationButtonClick()
	{
		Toast.makeText(mActivity, "MyLocation button clicked", Toast.LENGTH_SHORT).show();
		// Return false so that we don't consume the event and the default behavior still occurs
		// (the camera animates to the user's current position).
		return false;
	}

	@Override
	public boolean onTouch(View v, MotionEvent event)
	{
		int tempStore = 0;
		if (event.getAction() == MotionEvent.ACTION_DOWN) {
			for (int j = 0; j < 2; j++) {
				if (v.getId() == BUTTON_IDS[j]) {
					tempStore = j;
				}
			}
			_toneGenerator.startTone(TONE_IDS[tempStore]);
			System.out.println(BUTTON_IDS[tempStore]);
			Log.d("button number", Integer.toString(tempStore));
			if (v.getId() == R.id.HelpButton) {
				mActivity.attachHelpDialerScene();
			} else if (v.getId() == R.id.CameraButton) {
				mActivity.attachCameraScene();
			}
		}
		if (event.getAction() == MotionEvent.ACTION_UP) {
			_toneGenerator.stopTone();

		}
		return false;
	}

}
