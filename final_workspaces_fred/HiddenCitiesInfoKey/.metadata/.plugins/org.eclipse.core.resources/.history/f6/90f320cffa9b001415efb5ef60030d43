package com.example.hiddencitiesinfokey;


import android.annotation.SuppressLint;
import android.app.Activity;
import android.os.Bundle;
import android.view.MotionEvent;
import android.view.View;
import android.view.View.OnTouchListener;
import android.view.WindowManager;
import android.widget.Button;
import android.widget.TextView;
import android.widget.Toast;




@SuppressLint("ClickableViewAccessibility") public class HiddenCitiesInfoKey extends Activity implements OnTouchListener {

@SuppressWarnings("unused")
private Button exitInfoKeyBtn;

private TextView  instructionTitleText=null;
@SuppressWarnings("unused")
private TextView  instructionFollowMapText=null;
@SuppressWarnings("unused")
private TextView  instructionFindSignsText=null;
@SuppressWarnings("unused")
private TextView  instructionWearHeadphonesText=null;
@SuppressWarnings("unused")
private TextView  instructionsTakePhotosText=null;
@SuppressWarnings("unused")
private TextView  isntructionsCallHelpText=null;
@SuppressWarnings("unused")
private TextView  instructionsSeeThisPageText=null;
@SuppressWarnings("unused")
private TextView  instructionsGroupIsReadyText=null;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
    	
        super.onCreate(savedInstanceState);
        
        setContentView(R.layout.info_key);

       
        getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,
      			WindowManager.LayoutParams.FLAG_FULLSCREEN);

      	 if (getActionBar().isShowing()) getActionBar().hide();
          
          View decorView = getWindow().getDecorView();
          decorView.setSystemUiVisibility(View.SYSTEM_UI_FLAG_LAYOUT_STABLE
                                        | View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION
                                        | View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN
                                        | View.SYSTEM_UI_FLAG_HIDE_NAVIGATION
                                        | View.SYSTEM_UI_FLAG_FULLSCREEN
                                        | View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY);
          
          exitInfoKeyBtn =(Button) findViewById(R.id.exitInfoKeyBtn);
          
          instructionTitleText =(TextView)findViewById(R.id.instructionTitle);
          instructionTitleText.setText("instructionTitleText");
          
          instructionFollowMapText =(TextView)findViewById(R.id.instructionFollowMap);
          instructionFollowMapText.setText("instructionFollowMapText");
          
          instructionFindSignsText =(TextView)findViewById(R.id.instructionFindSigns);
          instructionFindSignsText.setText("instructionFindSignsText");
          
          instructionWearHeadphonesText =(TextView)findViewById(R.id.instructionWearHeadphones);
          instructionWearHeadphonesText.setText("instructionWearHeadphonesText");
          
          instructionsTakePhotosText =(TextView)findViewById(R.id.instructionsTakePhotos);
          instructionsTakePhotosText.setText("instructionsTakePhotosText");
          
          isntructionsCallHelpText =(TextView)findViewById(R.id.isntructionsCallHelp);
          isntructionsCallHelpText.setText("isntructionsCallHelpText");
          
          instructionsSeeThisPageText =(TextView)findViewById(R.id.instructionsSeeThisPage);
          instructionsSeeThisPageText.setText("instructionsSeeThisPageText");
          
          instructionsGroupIsReadyText =(TextView)findViewById(R.id.instructionsGroupIsReady);
          instructionsGroupIsReadyText.setText("instructionsGroupIsReadyText");


      
    }

    @Override
    protected void onResume() {
  
        super.onResume();
  
    }

    @Override
    protected void onPause() {
        super.onPause();
    }

	@Override
	public boolean onTouch(View v, MotionEvent event) {
		
		//when the button is pressed we can go to the map view
		Toast.makeText(getApplicationContext(), "So now we go to the map",
			      Toast.LENGTH_SHORT).show();
		return false;
	}
    

 


}
