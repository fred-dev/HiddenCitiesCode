package com.example.hiddencitiesmap;

import android.os.Bundle;

import com.example.mapdemo.R;
import com.google.android.gms.common.ConnectionResult;
import com.google.android.gms.common.api.GoogleApiClient;
import com.google.android.gms.common.api.GoogleApiClient.ConnectionCallbacks;
import com.google.android.gms.common.api.GoogleApiClient.OnConnectionFailedListener;
import com.google.android.gms.location.LocationListener;
import com.google.android.gms.location.LocationRequest;
import com.google.android.gms.location.LocationServices;
import com.google.android.gms.maps.CameraUpdateFactory;
import com.google.android.gms.maps.GoogleMap;
import com.google.android.gms.maps.GoogleMap.OnMyLocationButtonClickListener;
import com.google.android.gms.maps.model.BitmapDescriptorFactory;
import com.google.android.gms.maps.model.LatLng;
import com.google.android.gms.maps.model.Marker;
import com.google.android.gms.maps.model.MarkerOptions;
import com.google.android.gms.maps.model.Polyline;
import com.google.android.gms.maps.model.PolylineOptions;

import android.graphics.Color;
import android.os.Bundle;
import com.google.android.gms.maps.SupportMapFragment;

import android.graphics.Color;
import android.location.Location;

import android.support.v4.app.FragmentActivity;
import android.view.View;

import android.widget.Toast;

public class MainActivity extends FragmentActivity

implements ConnectionCallbacks, OnConnectionFailedListener, LocationListener,
		OnMyLocationButtonClickListener {

	private static final LatLng INSTALLATION1 = new LatLng(52.3931503, 4.91155);
	private static final LatLng INSTALLATION2 = new LatLng(52.392790, 4.912618);
	private static final LatLng INSTALLATION3 = new LatLng(52.392648, 4.912991);
	private static final LatLng INSTALLATION4 = new LatLng(52.391920, 4.912032);
	private static final LatLng INSTALLATION5 = new LatLng(52.391197, 4.911102);


	private static final int WIDTH_MAX = 50;
	private static final int HUE_MAX = 360;
	private static final int ALPHA_MAX = 255;
	
	private Marker mINSTALLATION1;
    private Marker mINSTALLATION2;
    private Marker mINSTALLATION3;
    private Marker mINSTALLATION4;
    private Marker mINSTALLATION5;
    
    
	private GoogleMap mMap;
	private Polyline mMutablePolyline;
	private GoogleApiClient mGoogleApiClient;


	// private TextView mMessageView;

	// These settings are the same as the settings for the map. They will in
	// fact give you updates
	// at the maximal rates currently possible.
	private static final LocationRequest REQUEST = LocationRequest.create()
			.setInterval(5000) // 5 seconds
			.setFastestInterval(16) // 16ms = 60fps
			.setPriority(LocationRequest.PRIORITY_HIGH_ACCURACY);

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_main);

		setUpMapIfNeeded();

	}

	@Override
	protected void onResume() {
		super.onResume();
		setUpMapIfNeeded();
		setUpGoogleApiClientIfNeeded();
		mGoogleApiClient.connect();
	}

	@Override
	public void onPause() {
		super.onPause();
		if (mGoogleApiClient != null) {
			mGoogleApiClient.disconnect();
		}
	}

	private void setUpMapIfNeeded() {
		// Do a null check to confirm that we have not already instantiated the
		// map.
		if (mMap == null) {
			// Try to obtain the map from the SupportMapFragment.
			mMap = ((SupportMapFragment) getSupportFragmentManager()
					.findFragmentById(R.id.map)).getMap();
			// Check if we were successful in obtaining the map.
			if (mMap != null) {
				mMap.setMyLocationEnabled(true);
				mMap.setOnMyLocationButtonClickListener(this);
				setUpMap();
			}
		}
	}
	 private void setUpMap() {


	        // Rectangle centered at Sydney.  This polyline will be mutable.
	        int radius = 5;
	        PolylineOptions options = new PolylineOptions()
	                .add(new LatLng(INSTALLATION1.latitude , INSTALLATION1.longitude ))
	                .add(new LatLng(INSTALLATION2.latitude , INSTALLATION2.longitude ))
	                .add(new LatLng(INSTALLATION3.latitude , INSTALLATION3.longitude ))
	                .add(new LatLng(INSTALLATION4.latitude , INSTALLATION4.longitude ))
	                .add(new LatLng(INSTALLATION5.latitude , INSTALLATION5.longitude ));
	       
	        mMutablePolyline = mMap.addPolyline(options.color(Color.BLUE).width(5));

	        addMarkersToMap();
	        // Move the map so that it is centered on the mutable polyline.
	        mMap.moveCamera(CameraUpdateFactory.newLatLng(INSTALLATION1));
	    }
	 
	 private void addMarkersToMap() {
	        // Uses a colored icon.
		 mINSTALLATION1 = mMap.addMarker(new MarkerOptions()
	                .position(INSTALLATION1)
	                .title("Brisbane")
	                .snippet("Population: 2,074,200"));

	        // Uses a custom icon with the info window popping out of the center of the icon.
		 mINSTALLATION2 = mMap.addMarker(new MarkerOptions()
	                .position(INSTALLATION2)
	                .title("Sydney")
	                .snippet("Population: 4,627,300")
	         
	                .infoWindowAnchor(0.5f, 0.5f));

	        // Creates a draggable marker. Long press to drag.
		 mINSTALLATION3 = mMap.addMarker(new MarkerOptions()
	                .position(INSTALLATION3)
	                .title("Melbourne")
	                .snippet("Population: 4,137,400")
	                .draggable(true));

	        // A few more markers for good measure.
		 mINSTALLATION4 = mMap.addMarker(new MarkerOptions()
	                .position(INSTALLATION4)
	                .title("Perth")
	                .snippet("Population: 1,738,800"));
		 mINSTALLATION5 = mMap.addMarker(new MarkerOptions()
	                .position(INSTALLATION5)
	                .title("Adelaide")
	                .snippet("Population: 1,213,000"));

	      
	        
	    }
	private void setUpGoogleApiClientIfNeeded() {
		if (mGoogleApiClient == null) {
			mGoogleApiClient = new GoogleApiClient.Builder(this)
					.addApi(LocationServices.API).addConnectionCallbacks(this)
					.addOnConnectionFailedListener(this).build();
		}
	}

	/**
	 * Button to get current Location. This demonstrates how to get the current
	 * Location as required without needing to register a LocationListener.
	 */
	public void showMyLocation(View view) {
		if (mGoogleApiClient != null && mGoogleApiClient.isConnected()) {
			String msg = "Location = "
					+ LocationServices.FusedLocationApi
							.getLastLocation(mGoogleApiClient);
			Toast.makeText(getApplicationContext(), msg, Toast.LENGTH_SHORT)
					.show();
		}
	}

	/**
	 * Implementation of {@link LocationListener}.
	 */
	@Override
	public void onLocationChanged(Location location) {
		// mMessageView.setText("Location = " + location);
	}

	/**
	 * Callback called when connected to GCore. Implementation of
	 * {@link ConnectionCallbacks}.
	 */
	@Override
	public void onConnected(Bundle connectionHint) {
		LocationServices.FusedLocationApi.requestLocationUpdates(
				mGoogleApiClient, REQUEST, this); // LocationListener
	}

	/**
	 * Callback called when disconnected from GCore. Implementation of
	 * {@link ConnectionCallbacks}.
	 */
	@Override
	public void onConnectionSuspended(int cause) {
		// Do nothing
	}

	/**
	 * Implementation of {@link OnConnectionFailedListener}.
	 */
	@Override
	public void onConnectionFailed(ConnectionResult result) {
		// Do nothing
	}

	@Override
	public boolean onMyLocationButtonClick() {
		Toast.makeText(this, "MyLocation button clicked", Toast.LENGTH_SHORT)
				.show();
		// Return false so that we don't consume the event and the default
		// behavior still occurs
		// (the camera animates to the user's current position).
		return false;
	}

}
