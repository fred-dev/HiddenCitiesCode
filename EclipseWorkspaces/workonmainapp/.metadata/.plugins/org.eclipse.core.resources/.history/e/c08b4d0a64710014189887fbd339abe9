package com.panframe.android.samples.SimplePlayer;

import java.util.*;

import processing.test.AudioTest2.AudioPlayManager;

import com.example.pappletfragmenttest.R;
import com.panframe.android.lib.*;

import android.net.Uri;
import android.os.Bundle;
import android.provider.MediaStore;
import android.app.Activity;
import android.app.Fragment;
import android.content.Context;
import android.content.Intent;
import android.database.Cursor;
import android.hardware.Sensor;
import android.hardware.SensorEvent;
import android.hardware.SensorEventListener;
import android.hardware.SensorManager;
import android.speech.RecognizerIntent;
//import android.support.v4.app.*;
//import android.support.v4.app.LoaderManager.*;
//import android.support.v4.content.*;
import android.util.Log;
import android.view.*;
import android.view.View.*;
import android.widget.*;
import android.widget.AdapterView.*;




public class CompassVideo extends Fragment implements  PFAssetObserver ,SensorEventListener {

	PFView				_pfview;
	PFAsset 			_pfasset;
    PFNavigationMode 	_currentNavigationMode = PFNavigationMode.MOTION;
	
	boolean 			_updateThumb = true;;
    Timer 				_scrubberMonitorTimer;    

    ViewGroup 			_frameContainer;

    private SensorManager mSensorManager;
    String[]				mPaths;
	AudioPlayManager[]		mPlayManagers	= null;
	private float			currentDegree	= 0f;
	private float			tempDegree		= 0f;
	 private final float[] mRotationMatrix = new float[16];
	 float[]					mRotation;
    @Override
    
    public void onCreate(Bundle savedInstanceState) {
    	super.onCreate(savedInstanceState);
//    	setContentView(R.layout.activity_main);
    }

	@Override
	public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
//		getActivity().requestWindowFeature(Window.FEATURE_NO_TITLE);
//		getActivity().getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN, WindowManager.LayoutParams.FLAG_FULLSCREEN);
        _frameContainer = (ViewGroup) getActivity().getWindow().getDecorView();
        _frameContainer.setBackgroundColor(0xFF000000);
		loadVideo("storage/sdcard0/hiddenCities/video/360.mp4");
		showControls(false);	
		_pfasset.play();
		
		mPaths = new String[4];

		mPaths[0] = "storage/sdcard0/hiddenCities/audio/compasAudio1.wav";
		mPaths[1] = "storage/sdcard0/hiddenCities/audio/compasAudio2.wav";
		mPaths[2] = "storage/sdcard0/hiddenCities/audio/compasAudio1.wav";
		mPaths[3] = "storage/sdcard0/hiddenCities/audio/compasAudio2.wav";
		
		mPlayManagers = new AudioPlayManager[mPaths.length];
		for (int i = 0; i < mPlayManagers.length; i++) {
			
			mPlayManagers[i] = new AudioPlayManager(mPaths[i], 64); // buffersize = 64kb
			mPlayManagers[i].setIsLooping(true);
			mPlayManagers[i].play();

		}

		//changed this line from getSystemService(SENSOR_SERVICE);
		mSensorManager = (SensorManager) getActivity().getSystemService(
				Context.SENSOR_SERVICE);

		mSensorManager.registerListener(this,
				mSensorManager.getDefaultSensor(Sensor.TYPE_ROTATION_VECTOR),
				SensorManager.SENSOR_DELAY_GAME);
		

		return null;
		
		
	}

    public void showControls(boolean bShow)
    {
    	
		if (_pfview != null)
		{
			if (!_pfview.supportsNavigationMode(PFNavigationMode.MOTION))
            Log.d("SimplePlayer","Not supported nav");
		}
    }

    public void loadVideo(String filename)
    {
		
        _pfview = PFObjectFactory.view(this.getActivity());               
        _pfasset = PFObjectFactory.assetFromUri(this.getActivity(), Uri.parse(filename), this);
        
        _pfview.displayAsset(_pfasset);
        _pfview.setNavigationMode(_currentNavigationMode);

        _frameContainer.addView(_pfview.getView(), 0);     

    }

	public void onStatusMessage(final PFAsset asset, PFAssetStatus status) {
		switch (status)
		{
			case LOADED:
				Log.d("SimplePlayer", "Loaded");
				break;
			case DOWNLOADING:
				Log.d("SimplePlayer", "Downloading 360 movie: "+ _pfasset.getDownloadProgress()+" percent complete");
				break;
			case DOWNLOADED:
				Log.d("SimplePlayer", "Downloaded to "+asset.getUrl());
				break;
			case DOWNLOADCANCELLED:
				Log.d("SimplePlayer", "Download cancelled");
				break;
			case PLAYING:
				Log.d("SimplePlayer", "Playing");
		        getActivity().getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);
				break;
			case PAUSED:
				Log.d("SimplePlayer", "Paused");
	
				break;
			case STOPPED:
				Log.d("SimplePlayer", "Stopped");
				
				getActivity().getWindow().clearFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);
				break;
			case COMPLETE:
				Log.d("SimplePlayer", "Complete");

				getActivity().getWindow().clearFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);
				break;
			case ERROR:
				Log.d("SimplePlayer", "Error");
				break;
		}
	}


    public void onPause() {
        super.onPause(); 
        if (_pfasset != null)
        {
	        if (_pfasset.getStatus() == PFAssetStatus.PLAYING)
	        	_pfasset.pause();
        }
    }
    

	public void  onStartCommand(Intent intent, int flags, int startId) {
		_pfasset.play();
	}

	@Override
	public void onSensorChanged(SensorEvent event) {
		if (event.sensor.getType() == Sensor.TYPE_ROTATION_VECTOR) {
            // convert the rotation-vector to a 4x4 matrix.
            SensorManager.getRotationMatrixFromVector(
                    mRotationMatrix , event.values);
             mRotation = new float[3];
            SensorManager.getOrientation(mRotation, event.values);
            Log.d("Rotation from mat x" ,Float.toString(mRotation[0]));
            Log.d("Rotation from mat y" ,Float.toString(mRotation[1]));
            Log.d("Rotation from mat z" ,Float.toString(mRotation[2]));
        }
		
	}

	@Override
	public void onAccuracyChanged(Sensor sensor, int accuracy) {
		// TODO Auto-generated method stub
		
	}
    
}
